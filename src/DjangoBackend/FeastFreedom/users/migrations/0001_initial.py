# Generated by Django 3.0.5 on 2021-04-05 19:53

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Please enter a valid phone number. (XXX-XXX-XXXX)', regex='^\\d{3}-\\d{3}-\\d{4}(-\\d{2,6})?$')])),
                ('address', models.CharField(max_length=40, validators=[django.core.validators.RegexValidator(message='Please enter a valid street address.', regex='^\\d{1,5} [a-zA-Z0-9\\. ]+$')])),
                ('city', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator(message='Please enter a valid city name.', regex="^[a-zA-Z\\. -']+$")])),
                ('state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DC', 'District of Columbia'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], max_length=20)),
                ('zip_code', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Please enter a valid ZIP code.', regex='^\\d{5}(-\\d{4})?$')])),
                ('question_one', models.CharField(choices=[('What was your childhood nickname?', 'What was your childhood nickname?'), ('What town/city did you live in as a child?', 'What town/city did you live in as a child?'), ('What primary school did you attend?', 'What primary school did you attend?'), ('What high school did you graduate from?', 'What high school did you graduate from?'), ('What is your favorite movie?', 'What is your favorite movie?'), ('What is your favorite song?', 'What is your favorite song?'), ("What is your mother's maiden name?", "What is your mother's maiden name?"), ('What is the name of your first pet?', 'What is the name of your first pet?'), ("What is your oldest sibling's name, excluding yourself?", "What is your oldest sibling's name, excluding yourself?")], max_length=80, validators=[django.core.validators.MinLengthValidator(limit_value=20, message='Security question must be at least 20 characters long.'), django.core.validators.MaxLengthValidator(limit_value=80, message='Security question must be at most 80 characters long.'), django.core.validators.RegexValidator(message='Please insert a valid security question.', regex="^[A-Za-z0-9 ,'//]{20,80}\\?$"), django.core.validators.ProhibitNullCharactersValidator()])),
                ('answer_one', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=2, message='Answer must be at least 2 characters long.'), django.core.validators.MaxLengthValidator(limit_value=80, message='Answer must be at most 50 characters long.'), django.core.validators.RegexValidator(message='Please insert a valid answer.', regex="^[A-Za-z0-9 ,'-:\\?]{2,50}$"), django.core.validators.ProhibitNullCharactersValidator()])),
                ('question_two', models.CharField(choices=[('What was your childhood nickname?', 'What was your childhood nickname?'), ('What town/city did you live in as a child?', 'What town/city did you live in as a child?'), ('What primary school did you attend?', 'What primary school did you attend?'), ('What high school did you graduate from?', 'What high school did you graduate from?'), ('What is your favorite movie?', 'What is your favorite movie?'), ('What is your favorite song?', 'What is your favorite song?'), ("What is your mother's maiden name?", "What is your mother's maiden name?"), ('What is the name of your first pet?', 'What is the name of your first pet?'), ("What is your oldest sibling's name, excluding yourself?", "What is your oldest sibling's name, excluding yourself?")], max_length=80, validators=[django.core.validators.MinLengthValidator(limit_value=20, message='Security question must be at least 20 characters long.'), django.core.validators.MaxLengthValidator(limit_value=80, message='Security question must be at most 80 characters long.'), django.core.validators.RegexValidator(message='Please insert a valid security question.', regex="^[A-Za-z0-9 ,'//]{20,}\\?$"), django.core.validators.ProhibitNullCharactersValidator()])),
                ('answer_two', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=2, message='Answer must be at least 2 characters long.'), django.core.validators.MaxLengthValidator(limit_value=80, message='Answer must be at most 50 characters long.'), django.core.validators.RegexValidator(message='Please insert a valid answer.', regex="^[A-Za-z0-9 ,'-:\\?]{2,50}$"), django.core.validators.ProhibitNullCharactersValidator()])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', users.managers.KitchenUserManager()),
            ],
        ),
    ]
